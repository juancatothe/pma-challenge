{"version":3,"sources":["Chart.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["highchartsGantt","Highcharts","Chart","constructorType","this","chartComponent","props","chartOptions","React","Component","Input","state","handleChange","bind","event","currentVal","currentTarget","value","currentName","name","Date","parse","activeTask","updatedTask","updateTask","position","className","onClick","hideInput","type","onChange","Moment","start","format","end","color","App","showInput","e","setState","inputDisplay","id","point","options","rank","key","tasks","console","log","series","data","title","text","xAxis","events","click","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAKAA,GAAgBC,K,IAiBCC,E,iLAbH,IAAD,EACP,OACE,kBAAC,KAAD,GACEC,gBAAiB,SADnB,gCAEmB,cAFnB,oBAGOC,KAAKC,gBAHZ,2BAIcJ,KAJd,wBAKWG,KAAKE,MAAMC,cALtB,Q,GAJYC,IAAMC,W,0lBCyDXC,E,YAzDX,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,GAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,0EAQNC,GAET,IAAIC,EAAcD,EAAME,cAAcC,MAClCC,EAAeJ,EAAME,cAAcG,KACnB,UAAhBD,EACFH,EAAaK,KAAKC,MAAMN,GAED,QAAhBG,IACPH,EAAaK,KAAKC,MAAMN,IAElB,KAAOX,KAAKE,MAAMgB,YAA1B,IACMC,EAAW,KACZnB,KAAKE,MAAMgB,WADC,eAEdJ,EAAcH,IAEjBX,KAAKE,MAAMkB,WAAWpB,KAAKE,MAAMgB,WAAWG,SAAUF,K,+BAMxD,OACE,yBAAKG,UAAU,mBACb,0BAAMC,QAASvB,KAAKE,MAAMsB,UAAWF,UAAU,gBAA/C,SACA,4CACA,0BAAMA,UAAU,cACZ,4CAEA,2BAAOG,KAAK,OAAOV,KAAK,OAAOF,MAAOb,KAAKE,MAAMgB,WAAWH,KAAMW,SAAU1B,KAAKQ,gBAEjF,kDAEA,2BAAOiB,KAAK,OAAOV,KAAK,QAAQF,MAAOc,IAAO3B,KAAKE,MAAMgB,WAAWU,OAAOC,OAAO,cAAeH,SAAU1B,KAAKQ,gBAEhH,gDAEA,2BAAOiB,KAAK,OAAOV,KAAK,MAAMF,MAAOc,IAAO3B,KAAKE,MAAMgB,WAAWY,KAAKD,OAAO,cAAeH,SAAU1B,KAAKQ,gBAE5G,6CAEA,2BAAOiB,KAAK,QAAQV,KAAK,QAAQF,MAAOb,KAAKE,MAAMgB,WAAWa,MAAOL,SAAU1B,KAAKQ,sB,GAjD9EJ,IAAMC,W,kOCkIX2B,E,2MA9HbC,UAAY,SAACC,GACX,EAAKC,SAAS,CACZC,cAAe,EACflB,WAAY,CACVmB,GAAIH,EAAEI,MAAMC,QAAQF,GACpBtB,KAAMmB,EAAEI,MAAMC,QAAQxB,KACtBa,MAAOM,EAAEI,MAAMC,QAAQX,MACvBE,IAAKI,EAAEI,MAAMC,QAAQT,IACrBC,MAAOG,EAAEI,MAAMC,QAAQR,MACvBV,SAAUa,EAAEI,MAAMC,QAAQlB,SAC1BmB,KAAMN,EAAEI,MAAMC,QAAQC,S,EAK5BhB,UAAY,WACV,EAAKW,SAAS,CACZC,cAAe,K,EAInBhB,WAAa,SAACqB,EAAKtB,GAEjB,IAAMuB,E,yVAAK,IAAQ,EAAKnC,MAAMgC,SAC9BI,QAAQC,IAAIF,GAEZA,EAAMG,OAAO,GAAGC,KAAKL,GAAOtB,EAE5B,EAAKgB,SAAS,CACZI,QAASG,EACTxB,WAAW,CACTmB,GAAIK,EAAMG,OAAO,GAAGC,KAAKL,GAAKJ,GAC9BtB,KAAM2B,EAAMG,OAAO,GAAGC,KAAKL,GAAK1B,KAChCa,MAAOc,EAAMG,OAAO,GAAGC,KAAKL,GAAKb,MACjCE,IAAKY,EAAMG,OAAO,GAAGC,KAAKL,GAAKX,IAC/BC,MAAOW,EAAMG,OAAO,GAAGC,KAAKL,GAAKV,MACjCV,SAAUqB,EAAMG,OAAO,GAAGC,KAAKL,GAAKpB,SACpCmB,KAAME,EAAMG,OAAO,GAAGC,KAAKL,GAAKD,S,EAItCjC,MAAQ,CACJgC,QAAS,CACLQ,MAAM,CACJC,KAAM,uCAERC,MAAO,CACHxB,KAAM,YAEVoB,OAAQ,CACJ,CACIC,KAAM,CAAC,CACHT,GAAI,QACJtB,KAAM,6BACNa,MAAOZ,KAAKC,MAAM,cAClBa,IAAKd,KAAKC,MAAM,cAChBc,MAAO,UACPV,SAAU,EACVmB,KAAM,GACV,CACIH,GAAI,QACJtB,KAAM,gCACNa,MAAOZ,KAAKC,MAAM,cAClBa,IAAKd,KAAKC,MAAM,cAChBc,MAAO,UACPV,SAAU,EACVmB,KAAM,GACV,CACIH,GAAI,QACJtB,KAAM,mCACNa,MAAOZ,KAAKC,MAAM,cAClBa,IAAKd,KAAKC,MAAM,cAChBc,MAAO,UACPV,SAAU,EACVmB,KAAM,GAEV,CACIH,GAAI,QACJtB,KAAM,uCACNa,MAAOZ,KAAKC,MAAM,cAClBa,IAAKd,KAAKC,MAAM,cAChBc,MAAO,UACPV,SAAU,EACVmB,KAAM,GAEV,CACIH,GAAI,QACJtB,KAAM,mCACNa,MAAOZ,KAAKC,MAAM,cAClBa,IAAKd,KAAKC,MAAM,cAChBc,MAAO,UACPV,SAAU,EACVmB,KAAM,GAEV,CACIH,GAAI,QACJtB,KAAM,4BACNa,MAAOZ,KAAKC,MAAM,cAClBa,IAAKd,KAAKC,MAAM,cAChBc,MAAO,UACPV,SAAU,EACVmB,KAAM,IAEVU,OAAO,CACHC,MAAO,SAACjB,GAAO,EAAKD,UAAUC,QAK9CE,cAAc,EACdlB,WAAY,I,wEAId,OACE,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAOnB,aAAcH,KAAKO,MAAMgC,WAEhCvC,KAAKO,MAAM6B,aAAe,kBAAC,EAAD,CAAOZ,UAAWxB,KAAKwB,UAAWJ,WAAYpB,KAAKoB,WAAYF,WAAYlB,KAAKO,MAAMW,aAAgB,U,GAzHxHd,IAAMC,WCIJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d82afdbe.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport highchartsGantt from 'highcharts/modules/gantt'\n\nhighchartsGantt(Highcharts)\n\nclass Chart extends React.Component {\n  \n    render() {\n      return (\n        <HighchartsReact\n          constructorType={\"chart\"}\n          constructorType={\"ganttChart\"}\n          ref={this.chartComponent}\n          highcharts={Highcharts}\n          options={this.props.chartOptions}\n        />\n      );\n    }\n  }\n  \n  export default Chart;","import React from 'react'\nimport './App.css'\nimport Moment from 'moment'\nimport moment from 'moment-timezone';\n\n\nclass Input extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n      }\n    \n      this.handleChange = this.handleChange.bind(this);\n    }\n  \n    handleChange(event) {\n        // Take a copy of the current task\n        let currentVal =  event.currentTarget.value\n        let currentName =  event.currentTarget.name\n        if (currentName === 'start'){\n          currentVal = Date.parse(currentVal)\n        } \n        else if (currentName === 'end'){\n          currentVal = Date.parse(currentVal)\n        }\n        let task = {...this.props.activeTask}\n        const updatedTask = {\n          ...this.props.activeTask,\n          [currentName]: currentVal\n        };\n        this.props.updateTask(this.props.activeTask.position, updatedTask);\n        \n    }\n  \n  \n    render() {\n      return (\n        <div className=\"input-container\">\n          <span onClick={this.props.hideInput} className=\"close-button\">Close</span>\n          <h2>Update Tasks</h2>\n          <form className=\"input-form\">\n              <label>\n              Task Name:\n              <input type=\"text\" name=\"name\" value={this.props.activeTask.name} onChange={this.handleChange} />\n              </label>\n              <label>\n              Task Start Date:\n              <input type=\"date\" name=\"start\" value={Moment(this.props.activeTask.start).format('YYYY-MM-DD')} onChange={this.handleChange} />\n              </label>\n              <label>\n              Task End Date:\n              <input type=\"date\" name=\"end\" value={Moment(this.props.activeTask.end).format('YYYY-MM-DD')} onChange={this.handleChange} />\n              </label>\n              <label>\n              Task Color:\n              <input type=\"color\" name=\"color\" value={this.props.activeTask.color} onChange={this.handleChange} />\n              </label>\n          </form>\n        </div>\n      );\n    }\n  }\n  \n\nexport default Input;\n","import React from 'react'\nimport './App.css'\nimport Chart from './Chart'\nimport Input from './Input'\nimport Highcharts from 'highcharts'\n\n\n\nclass App extends React.Component {\n\n  showInput = (e) => {\n    this.setState({\n      inputDisplay : true,\n      activeTask: {\n        id: e.point.options.id,\n        name: e.point.options.name,\n        start: e.point.options.start,\n        end: e.point.options.end,\n        color: e.point.options.color,\n        position: e.point.options.position,\n        rank: e.point.options.rank\n      }\n    })\n  }\n\n  hideInput = () =>{\n    this.setState({\n      inputDisplay : false\n    })\n  }\n\n  updateTask = (key, updatedTask) => {\n    // 1. Take a copy of the current state\n    const tasks = { ...this.state.options}\n    console.log(tasks)\n    // 2. Update that state\n    tasks.series[0].data[key] = updatedTask\n    // 3. Set that to state\n    this.setState({ \n      options: tasks,\n      activeTask:{\n        id: tasks.series[0].data[key].id,\n        name: tasks.series[0].data[key].name,\n        start: tasks.series[0].data[key].start,\n        end: tasks.series[0].data[key].end,\n        color: tasks.series[0].data[key].color,\n        position: tasks.series[0].data[key].position,\n        rank: tasks.series[0].data[key].rank\n    }});\n  };\n\n  state = {\n      options: {\n          title:{\n            text: 'Very Important Companywide Tasklist'\n          },\n          xAxis: {\n              type: 'datetime'\n          },\n          series: [\n              {\n                  data: [{\n                      id: 'task1',\n                      name: 'Shred Classified Documents',\n                      start: Date.parse('01/17/2020'),\n                      end: Date.parse('02/14/2020'),\n                      color: '#4682B4',\n                      position: 0,\n                      rank: 0},\n                  {\n                      id: 'task2',\n                      name: 'Change Tires on Vehicle Fleet',\n                      start: Date.parse('01/31/2020'),\n                      end: Date.parse('03/17/2020'),\n                      color: '#D8BFD8',\n                      position: 1,\n                      rank: 1},\n                  {\n                      id: 'task3',\n                      name: 'Export Data to Excel Spreadsheet',\n                      start: Date.parse('03/31/2020'),\n                      end: Date.parse('04/17/2020'),\n                      color: '#FFE4B5',\n                      position: 2,\n                      rank: 2\n                  },\n                  {\n                      id: 'task4',\n                      name: 'Purchase 8000 Reams of Printer Paper',\n                      start: Date.parse('04/18/2020'),\n                      end: Date.parse('05/19/2020'),\n                      color: '#FF6347',\n                      position: 3,\n                      rank: 3\n                  },\n                  {\n                      id: 'task5',\n                      name: 'Interview Prospective Candidates',\n                      start: Date.parse('05/31/2020'),\n                      end: Date.parse('06/21/2020'),\n                      color: '#FF1493',\n                      position: 4,\n                      rank: 4\n                  },\n                  {\n                      id: 'task6',\n                      name: 'Clone Github Repositories',\n                      start: Date.parse('07/31/2020'),\n                      end: Date.parse('08/19/2020'),\n                      color: '#7FFF00',\n                      position: 5,\n                      rank: 5\n                  }],\n                  events:{\n                      click: (e) => {this.showInput(e)}\n                  }\n              }\n          ]\n      },\n      inputDisplay: false,\n      activeTask: {}\n    };\n    \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Chart chartOptions={this.state.options}></Chart>\n        </header>\n        { this.state.inputDisplay ? <Input hideInput={this.hideInput} updateTask={this.updateTask} activeTask={this.state.activeTask}/> : null }\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}