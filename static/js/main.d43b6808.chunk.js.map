{"version":3,"sources":["Chart.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["highchartsGantt","Highcharts","Chart","constructorType","ref","this","chartComponent","highcharts","options","props","chartOptions","React","Component","Input","state","handleChange","bind","handleStartChange","handleEndChange","event","currentVal","currentTarget","value","currentName","name","updatedTask","activeTask","updateTask","position","Date","parse","className","onClick","hideInput","type","onChange","selected","start","dateFormat","end","color","App","showInput","e","setState","inputDisplay","id","point","rank","key","tasks","console","log","series","data","title","text","xAxis","events","click","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d43b6808.chunk.js","sourcesContent":["import React from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport highchartsGantt from 'highcharts/modules/gantt'\r\n\r\nhighchartsGantt(Highcharts)\r\n\r\nclass Chart extends React.Component {\r\n  \r\n    render() {\r\n      return (\r\n        <HighchartsReact\r\n          constructorType={\"ganttChart\"}\r\n          ref={this.chartComponent}\r\n          highcharts={Highcharts}\r\n          options={this.props.chartOptions}\r\n        />\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Chart;","import React from 'react'\r\nimport './App.css'\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n\r\nclass Input extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n      }\r\n    \r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleStartChange = this.handleStartChange.bind(this);\r\n      this.handleEndChange = this.handleEndChange.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n        // Take a copy of the current task\r\n        let currentVal =  event.currentTarget.value\r\n        let currentName =  event.currentTarget.name\r\n\r\n        const updatedTask = {\r\n          ...this.props.activeTask,\r\n          [currentName]: currentVal\r\n        };\r\n        this.props.updateTask(this.props.activeTask.position, updatedTask);   \r\n    }\r\n  \r\n    handleStartChange(event){\r\n      let currentVal =  event\r\n      currentVal = Date.parse(currentVal)\r\n      \r\n      const updatedTask = {\r\n        ...this.props.activeTask,\r\n        'start': currentVal\r\n      };\r\n      this.props.updateTask(this.props.activeTask.position, updatedTask);   \r\n    }\r\n    \r\n    handleEndChange(event){\r\n      let currentVal =  event\r\n      currentVal = Date.parse(currentVal)\r\n      \r\n      const updatedTask = {\r\n        ...this.props.activeTask,\r\n        'end': currentVal\r\n      };\r\n      this.props.updateTask(this.props.activeTask.position, updatedTask);   \r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"input-container\">\r\n          <span onClick={this.props.hideInput}>Close</span>\r\n          <h2>Update Tasks</h2>\r\n          <form className=\"input-form\">\r\n              <label>\r\n              Task Name:\r\n              <input type=\"text\" name=\"name\" value={this.props.activeTask.name} onChange={this.handleChange} />\r\n              </label>\r\n              <label>\r\n              Task Start Date:\r\n              <DatePicker\r\n                onChange={ this.handleStartChange }\r\n                selected={this.props.activeTask.start}\r\n                name=\"start\"\r\n                dateFormat=\"MM/dd/yyyy\"\r\n              />\r\n              </label>\r\n              <label>\r\n              Task End Date:\r\n              <DatePicker\r\n                onChange={ this.handleEndChange }\r\n                selected={this.props.activeTask.end}\r\n                name=\"end\"\r\n                dateFormat=\"MM/dd/yyyy\"\r\n              />\r\n              </label>\r\n              <label>\r\n              Task Color:\r\n              <input type=\"color\" name=\"color\" value={this.props.activeTask.color} onChange={this.handleChange} />\r\n              </label>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\nexport default Input;\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Chart from './Chart'\r\nimport Input from './Input'\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  showInput = (e) => {\r\n    this.setState({\r\n      inputDisplay : true,\r\n      activeTask: {\r\n        id: e.point.options.id,\r\n        name: e.point.options.name,\r\n        start: e.point.options.start,\r\n        end: e.point.options.end,\r\n        color: e.point.options.color,\r\n        position: e.point.options.position,\r\n        rank: e.point.options.rank\r\n      }\r\n    })\r\n  }\r\n\r\n  hideInput = () =>{\r\n    this.setState({\r\n      inputDisplay : false\r\n    })\r\n  }\r\n\r\n  updateTask = (key, updatedTask) => {\r\n    // 1. Take a copy of the current state\r\n    const tasks = { ...this.state.options}\r\n    console.log(tasks)\r\n    // 2. Update that state\r\n    tasks.series[0].data[key] = updatedTask\r\n    // 3. Set that to state\r\n    this.setState({ \r\n      options: tasks,\r\n      activeTask:{\r\n        id: tasks.series[0].data[key].id,\r\n        name: tasks.series[0].data[key].name,\r\n        start: tasks.series[0].data[key].start,\r\n        end: tasks.series[0].data[key].end,\r\n        color: tasks.series[0].data[key].color,\r\n        position: tasks.series[0].data[key].position,\r\n        rank: tasks.series[0].data[key].rank\r\n    }});\r\n  };\r\n\r\n  state = {\r\n      options: {\r\n          title:{\r\n            text: 'Very Important Companywide Tasklist'\r\n          },\r\n          xAxis: {\r\n              type: 'datetime'\r\n          },\r\n          series: [\r\n              {\r\n                  data: [{\r\n                      id: 'task1',\r\n                      name: 'Shred Classified Documents',\r\n                      start: Date.parse('01/17/2020'),\r\n                      end: Date.parse('02/14/2020'),\r\n                      color: '#4682B4',\r\n                      position: 0,\r\n                      rank: 0},\r\n                  {\r\n                      id: 'task2',\r\n                      name: 'Change Tires on Vehicle Fleet',\r\n                      start: Date.parse('01/31/2020'),\r\n                      end: Date.parse('03/17/2020'),\r\n                      color: '#D8BFD8',\r\n                      position: 1,\r\n                      rank: 1},\r\n                  {\r\n                      id: 'task3',\r\n                      name: 'Export Data to Excel Spreadsheet',\r\n                      start: Date.parse('03/31/2020'),\r\n                      end: Date.parse('04/17/2020'),\r\n                      color: '#FFE4B5',\r\n                      position: 2,\r\n                      rank: 2\r\n                  },\r\n                  {\r\n                      id: 'task4',\r\n                      name: 'Purchase 8000 Reams of Printer Paper',\r\n                      start: Date.parse('04/18/2020'),\r\n                      end: Date.parse('05/19/2020'),\r\n                      color: '#FF6347',\r\n                      position: 3,\r\n                      rank: 3\r\n                  },\r\n                  {\r\n                      id: 'task5',\r\n                      name: 'Interview Prospective Candidates',\r\n                      start: Date.parse('05/31/2020'),\r\n                      end: Date.parse('06/21/2020'),\r\n                      color: '#FF1493',\r\n                      position: 4,\r\n                      rank: 4\r\n                  },\r\n                  {\r\n                      id: 'task6',\r\n                      name: 'Clone Github Repositories',\r\n                      start: Date.parse('07/31/2020'),\r\n                      end: Date.parse('08/19/2020'),\r\n                      color: '#7FFF00',\r\n                      position: 5,\r\n                      rank: 5\r\n                  }],\r\n                  events:{\r\n                      click: (e) => {this.showInput(e)}\r\n                  }\r\n              }\r\n          ]\r\n      },\r\n      inputDisplay: false,\r\n      activeTask: {}\r\n    };\r\n    \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Chart chartOptions={this.state.options}></Chart>\r\n        </header>\r\n        { this.state.inputDisplay ? <Input hideInput={this.hideInput} updateTask={this.updateTask} activeTask={this.state.activeTask}/> : null }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}